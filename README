=========================================================================
ISTRUZIONI per il SECONDO ASSEGNAMENTO INFORMATICA anno 2018/19
========================================================================
L'assegnamento prevede la realizzazione di alcune funzioni che permettono di implementare il gioco della battaglia navale.
Una descrizione approfondita si trova nel file ship2.pdf.

Cosa deve essere fatto:
(1) le funzioni il cui prototipo si trova nel file bnavale.h devono essere implementate in un file chiamato bnavale.c
(2) il file bnavale.c deve essere consegnati al docente nel formato "tar" creato automaticamente come descritto piu' sotto
(5) il "tar" deve essere allegato ad una normale mail da inviare al proprio docente (susanna.pelagatti@unipi.it o conte@di.unipi.it) con oggetto"info19: consegna secondo assegnamento"

------------------------------------------------
Estrarre il materiale dal KIT dell'assignmento
------------------------------------------------
Creare una directory temporanea, copiare kit_a2.tar  
nella directory e spostarsi nella directory appena creata. Es.

$$ mkdir Assegnamento2
$$ mv kit_a2.tar Assegnamento2
$$ cd Assegnamento2

S-tarare i file del kit con

$$ tar xvf kit_a2.tar

questo comando crea nella directory corrente una directory "BNAVALE"
con i seguenti file

$$ ls BNAVALE
ship2.pdf		: file contenente la descrizione del gioco da realizzare

bnavale.h 		: header file che contiene i prototipi delle funzioni
			  da realizzare

01test.c
02test.c
03test.c
04test.c		: file che contengono i main() di test forniti dai
			  docenti (NON MODIFICARE)
bnavale_docenti.c	: file con alcune funzioni realizzate dai docenti e
			  utilizzate nei test (NON MODIFICARE)

DATA/			  : cartella con vari file di dati utilizzati nei test
			  (NON NODIFICARE)

Makefile		: un file che permette l'automatizzazione della
                          compilazione e dei test forniti dai
			  docenti (NON MODIFICARE)
			
README			: questo file


gruppo-check.pl		: uno script Perl che controlla il formato del file
			  gruppo.txt prima di effettuare la consegna
			  (NON MODIFICARE)

gruppo.txt		: un file di esempio di specifica del gruppo
			  (massimo 2 studenti per gruppo)
			  (deve essere aggiornato con i dati di chi consegna,
			  secondo il formato esemplificato)

========================================================================
ISTRUZIONI per la realizzazione dell'assegnamento
========================================================================

L'assegnamento prevede la realizzazione di alcune funzioni
(le specifiche dettagliate si trovano nei commenti dei file bnavale.h).

Lo studente deve realizzare le funzioni secondo le specifiche, testandone 
il funzionamento con delle funzioni main() sviluppate in modo opportuno.

Quando si e' ragionevolmente sicuri della correttezza delle funzioni in base
alle specifiche ed ai test che abbiamo effettuato si puo' passare ai test
automatici contenuti nel Makefile e sviluppati dai docenti.
E' importante non eseguire i test del Makefile con codice non 
precedentemente testato perche' in questo caso i risultati sarebebro di 
difficile interpretazione e fuorvianti.

I test del Makefile sono 4:

1) il primo, attivabile dando da shell il comando
"make test1"
testa le funzioni per allocare,deallocare e inizializzare l'area di gioco.
Il test non fa altro che eseguire il main() contenuto nel file "01test.c" 
che lo studente e' invitato a leggere e comprendere.

2) il secondo test, attivabile dando da shell il comando
"make test2"
testa le funzioni di piazzamento delle navi di diverse dimensioni.
Il test non fa altro che eseguire il main() contenuto nel file "02test.c"
che lo studente e' invitato a leggere e comprendere.

3) il terzo test (03test.c attivabile con "make test3") testa la funzione
esegui_mossa() che calcola l'esito di una singola mossa. 
Il test non fa altro che eseguire il main() contenuto nel file "02test.c"
che lo studente e' invitato a leggere e comprendere.
Visto che il test esegue molto velocemente confrontile mosse contenute nel 
file mosse.txt nella cartella DATA/ e confronta il risultato ocn quello 
atteso puo' essere difficile capire cosa non funziona.
Per questo motivo e' fornita una versione del test "per il debugging" 
attivabile con "make test3debug" che permette di inserire manualmente le 
mosse nel file DATA/mosse.txt e di verificare cosa succede.

4) il quarto test non fa altro che attivare il gioco complessivo 
attraverso la funzione gioca() ed e' attivabile da shell con il comando
"make test4".
Anche in questo caso invitiamo gli studenti a prendere visione e comprendere 
il main() in 04test.c che viene attivato da questo test.


------------------
Come procedere --> i passi :
-----------------

1) leggere attentamente ship2.pdf

2) implementare e testare le funzioni in bnavale.h nel file bnavale.c

3) testare il software con i test forniti dai
  docenti. 

       $ make test1
       $ make test2
       $ make test3       
       $ make test4
       

  NOTA: (1) il file bnavale.c si deve trovare nella cartella BNAVALE/
 
  (2) E' importante che il test fornito dai docenti venga effettuato solo su
  un programma gia' funzionante e testato altrimenti i risultati
  possono essere di difficile interpretazione, fuorvianti o inutili.

4) preparare la documentazione: ovvero commentare adeguatamente i *.c
   ed inserire un’ intestazione contenente i nomi
   degli sviluppatori ed  una dichiarazione di originalita' 

   /** \file pippo.c
       \author Nino Bixio & Giuseppe Garibaldi
     Si dichiara che il contenuto di questo file e' in ogni sua parte opera
     originale degli  autori.  */

5) aggiornare il file "gruppo.txt" con i nomi e dati degli sviluppatori

6) consegnare il file eseguendo

      bash:~$ make consegna

   e seguendo le istruzioni.

   Il target consegna crea un file tar che deve essere inviato
   all'indirizzo del docente 

   "info19: consegna secondo assegnamento"

   Se il make non funziona nell'ambiente in cui state sviluppando, create
   un tar file con all'interno il file bnavale.c
   e bnavale.txt ed inviatelo al
   docente come sopra.
   Tutte le consegne verranno confermate con un messaggio entro 2/3
   giorni all'indirizzo da cui e' stata effettuata la consegna. In
   caso questo non si verifichi contattare il docente.
   

---------------------------------------
 NOTE IMPORTANTI: LEGGERE ATTENTAMENTE
---------------------------------------

1) tutti gli elaborati verranno confrontati fra di loro con tool automatici
   per stabilire eventuali situazioni di PLAGIO. Se gli elaborato sono 
   ragionevolmente simili verranno scartati.

2) Chi in sede di orale risulta palesemente non essere l'autore del software
   consegnato in uno degli assegnamenti dovra' ripetere l'esame

3) Tutti i comportamenti scorretti ai punti 1 e 2 verranno segnalati
   ufficialmente al presidente del corso di laurea

----------------------------
 VALUTAZIONE DELL'ASSEGNAMENTO:
----------------------------

Il completamento dell'assegnamento è obbligatorio per poter sostenere l'esame.
Inoltre, gli studenti che consegnano una versione funzionante e ragionevolmente
corretta dell'assegnamento entro la data di scadenza accumulano un bonus di 2
punti che verra' sommato al voto finale (vedi lucidi lezioni ed
esercitazioni).

La qualita' del codice consegnato e delle discussioni fornite per i 2
assegnamenti sara' valutata complessivamente da 0 a 30 e fara' media
con il voto dell'esame orale.
